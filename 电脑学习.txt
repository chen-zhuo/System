32位系统和64位系统的区别有以下四点：
第一，CPU要求不同
CPU有32位和64位之分，32位的CPU只能安装32位系统，而64位的CPU既可以安装32位系统也可以安装64位系统
第二，运算速度不同
64位CPU的指令集可以运行64位数据指令，比32位CPU提高了一倍（需要64位软件支持）
第三，寻址能力不同
64位系统可以支持多达128 GB的内存和多达16 TB的虚拟内存，而32位CPU和操作系统最大只可支持4G内存（实际只有3.25G左右）。 
第四，软件兼容性不同
目前，64位系统比32位系统的软件少，主要是64位系统推出的时间不长，所以64位系统的兼容性不如32位，虽然可以兼容32位软件，但是部分32位的软件在64位系统无法运行，但是目前的Win7 64位系统兼容性好了很多。

64位系统中C盘program files和program files（X86）文件夹的区别？
在64位系统下，为了更好的兼容32位程序，在安装一些32位程序（注意某些程序就是32位的），会默认扔到program files(x86)这个文件夹下，而一些64位的程序，或程序本身没有位数区别的，会默认扔到program files这个文件夹下，都有一些与程序使用相关的程序，不能轻易删。不过，提醒一下，安装程序时，如果默认路径给出program files(x86)，建议最好手动修改一下，改成 d:/program files这样的文件夹，因为有一些程序，一识别文件夹时，会无法识别(x86)这样的写法，而导致你程序无法使用。


硬盘分区的理解：
分区就是硬盘一个大整体划分区域，区域分为三类主分区和扩展分区和逻辑分区，主分区可以多个或一个且必须有，最多可能创建4个，当创建四个主分区时候，就无法再创建扩展分区了，当然也就没有逻辑分区了。扩展分区可有可无，有的话只能存在一个且必须是一个整体，但扩展分区可以划为多个逻辑分区，就是D盘E盘等，所以D盘E盘等都各为一个逻辑分区，共属一个扩展分区。给新硬盘上建立分区时都要遵循以下的顺序：建立主分区→建立扩展分区→建立逻辑分区→激活主分区→格式化所有分区。活动分区：就是当前活动的、操作系统可以启动的分区。



重装系统中后黑屏显示a disk read error occurred（磁盘读取错误）原因及解决方法：
系统装在分区的中间部分了，C盘在中间，主分区为C盘就出来了，后边就是D盘，也就是扩展分区中的逻辑分区，因为C盘前面部分的空余与C盘后面部分不是整体且扩展分区只能存在一个，所以建立分区就只能为主分区，所以无论在windows系统中新加卷，还是在pe系统分区工具空闲空间建立新的分区，都只能是主分区（如果这种情况在windows中新加卷进入pe系统就会发现C盘变为了D盘，这是因为出现了两个主分区，且电脑黑屏显示a disk read error occurred）。问题就出来了，出现了两个主分区，一个有系统一个没有就会导致电脑读取磁盘错误，电脑不知道系统在哪个分区里面，屏幕就会显示a disk read error occurred。解决方法就是格式化C盘，重新分区，将系统装在分区的最前面部分为主分区，后面的整体为一个扩展分区，再划分D盘E盘逻辑分区，充分利用磁盘空间。


双系统是不是分别在两个主分区安装？
双启动系统完全没必要在两个主分区安装，因为不管你设置了几个主分区，电脑启动时，真正起作用的就是主硬盘的第一主分区（即C盘）。完全可以一个系统安装在主分区，另一个系统安装到逻辑分区。安装版本按照先低后高的顺序安装即可，即先装XP，后装WIn7。尤其是第二个安装的系统，强烈建议使用原版安装，否则，还有修复引导项才能启动进入该系统。


# 电脑环境配置

### 配置环境的作用

不用将命令行执行的位置切换到应用程序所在的文件夹下，直接在命令行内输入相关**应用程序（后缀名为exe）**的名称，就能运行该应用程序。

### 配置环境流程

我的电脑（右键）――属性――高级系统设置――高级（选项卡）――环境变量――（上半区）用户变量――PATH变量（双击或点击编辑按钮）――变量值（最后面）――添加；（分隔不同的变量）再添加变量路径（就是应用程序的路径）――确定（保存环境变量成功）

##### 编程语言

**计算机程序设计语言，通常简称为编程语言，是一组用来定义计算机程序的语法规则。**

编程语言一般分为两大类：**编译型语言**、**解释型语言**。

**编译型语言：程序执行前需要一个专门的编译过程，把程序编译成为机器语言的文件，运行时不再编译，直接使用编译的结果。**

优点：程序执行效率高

缺点：依赖编译器，跨平台性比较差

代表语言：`C`、`C++` 等

执行流程：

1. 用户提交源码。
2. 编译器将源码编译成目标代码，但是这时候还不能执行，因为缺少启动代码和相关的库代码。
3. 针对2中的问题，连接器上场了，找到以上缺少的代码，并进行组装成最后机器可以直接运行的可执行文件。

![编译型](image/编译型.png)

**解释型语言：不需要编译，但在运行程序时，由解释器先翻译成中间代码，再运行。**	

优点：程序不进行预先编译，以文本方式存储程序代码。

缺点：每执行一次都要翻译一次，效率比较低。

代表语言：`Python`、`JavaScript`、`Shell` 等

执行流程：

1. 用户提交源码。
2. 解释器将源码转化为字节码，在 Python 中一般为 `.pyc` 文件，这个时候机器不能执行字节码的。
3. 在 Python 中由虚拟机来执行字节码，这里需要强调一下，这个虚拟机不是 `vmware` 或者 `virtualbox` 的虚拟机概念。由于字节码一般是不依赖于操作系统，所以可以跨平台运行，有虚拟机就可以搞定了。

![解释型](image/解释型.png)

##### 

# 计算机基础

### 开源和闭源

**开源是不仅提供程序，还提供程序源代码。**

程序开源了，帮助测试和修改的人也就多了，程序也就更丰富，变化更快，但缺点是质量参差不齐，品控很难把握。如安卓、各种LINUX发行版、各大开源社区

**闭源是只提供程序，不提供源代码，别人就不能轻易的修改程序，也不能轻易的知道程序到底是怎么实现的。**

程序闭源了，能够修改升级的只有程序提供方，程序更新速度慢，对市场反应迟钝，是硬伤，但好处是来源就一个，安全性和品控，做的很好。如苹果、MS

# 堆栈

##### 堆栈

**内存中有两个特殊的区域：栈、堆**

栈：**栈中的内存是系统自动管理的**（内存的开辟和释放）--- 作用域结束，内存就释放

堆：**堆中的内存都需要写程序去开辟和释放的**（**python中这个过程也已经自动化**）